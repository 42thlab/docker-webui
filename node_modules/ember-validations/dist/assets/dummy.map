{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/controllers/foo.js","dummy/ember-validations/tests/modules/ember-validations/errors.jshint.js","dummy/ember-validations/tests/modules/ember-validations/index.jshint.js","dummy/ember-validations/tests/modules/ember-validations/messages.jshint.js","dummy/ember-validations/tests/modules/ember-validations/mixin.jshint.js","dummy/ember-validations/tests/modules/ember-validations/patterns.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/base.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/absence.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/acceptance.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/confirmation.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/exclusion.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/format.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/inclusion.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/length.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/numericality.jshint.js","dummy/ember-validations/tests/modules/ember-validations/validators/local/presence.jshint.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/services/validations.js","dummy/templates/application.js","dummy/tests/app.jshint.js","dummy/tests/controllers/foo.jshint.js","dummy/tests/helpers/container.js","dummy/tests/helpers/container.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/helpers/validator-assertions.js","dummy/tests/helpers/validator-assertions.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/conditional-validators-test.js","dummy/tests/unit/conditional-validators-test.jshint.js","dummy/tests/unit/controller-test.js","dummy/tests/unit/controller-test.jshint.js","dummy/tests/unit/errors-test.js","dummy/tests/unit/errors-test.jshint.js","dummy/tests/unit/validate-test.js","dummy/tests/unit/validate-test.jshint.js","dummy/tests/unit/validators/base-test.js","dummy/tests/unit/validators/base-test.jshint.js","dummy/tests/unit/validators/local/absence-test.js","dummy/tests/unit/validators/local/absence-test.jshint.js","dummy/tests/unit/validators/local/acceptance-test.js","dummy/tests/unit/validators/local/acceptance-test.jshint.js","dummy/tests/unit/validators/local/confirmation-test.js","dummy/tests/unit/validators/local/confirmation-test.jshint.js","dummy/tests/unit/validators/local/exclusion-test.js","dummy/tests/unit/validators/local/exclusion-test.jshint.js","dummy/tests/unit/validators/local/format-test.js","dummy/tests/unit/validators/local/format-test.jshint.js","dummy/tests/unit/validators/local/inclusion-test.js","dummy/tests/unit/validators/local/inclusion-test.jshint.js","dummy/tests/unit/validators/local/length-test.js","dummy/tests/unit/validators/local/length-test.jshint.js","dummy/tests/unit/validators/local/numericality-test.js","dummy/tests/unit/validators/local/numericality-test.jshint.js","dummy/tests/unit/validators/local/presence-test.js","dummy/tests/unit/validators/local/presence-test.jshint.js","dummy/tests/unit/validators/remote/uniqueness_test.js","dummy/tests/unit/validators/remote/uniqueness_test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/controllers/foo', ['exports', 'ember', 'ember-validations'], function (exports, Ember, EmberValidations) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(EmberValidations['default'].Mixin, {\n    validations: {\n      foo: {\n        presence: true\n      }\n    }\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/errors.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations\");\n  test(\"modules/ember-validations/errors.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/errors.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/index.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations\");\n  test(\"modules/ember-validations/index.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/index.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/messages.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations\");\n  test(\"modules/ember-validations/messages.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/messages.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/mixin.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations\");\n  test(\"modules/ember-validations/mixin.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/mixin.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/patterns.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations\");\n  test(\"modules/ember-validations/patterns.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/patterns.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/base.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators\");\n  test(\"modules/ember-validations/validators/base.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/base.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/absence.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/absence.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/absence.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/acceptance.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/acceptance.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/acceptance.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/confirmation.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/confirmation.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/confirmation.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/exclusion.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/exclusion.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/exclusion.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/format.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/format.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/format.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/inclusion.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/inclusion.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/inclusion.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/length.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/length.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/length.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/numericality.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/numericality.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/numericality.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-validations/tests/modules/ember-validations/validators/local/presence.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-validations/validators/local\");\n  test(\"modules/ember-validations/validators/local/presence.js should pass jshint\", function () {\n    ok(true, \"modules/ember-validations/validators/local/presence.js should pass jshint.\");\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('dummy/services/validations', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var set = Ember['default'].set;\n\n  exports['default'] = Ember['default'].Object.extend({\n    init: function init() {\n      set(this, \"cache\", {});\n    }\n  });\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Welcome to Ember.js\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/foo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/foo.js should pass jshint', function() { \n    ok(true, 'controllers/foo.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/container', ['exports', 'ember', 'ember/resolver'], function (exports, Ember, Resolver) {\n\n  'use strict';\n\n  exports.buildContainer = buildContainer;\n\n  function buildContainer() {\n    var container = new Ember['default'].Container();\n    container.resolver = buildResolver();\n    container.normalizeFullName = container.resolver.normalize;\n    container.describe = container.resolver.describe;\n    container.makeToString = container.resolver.makeToString;\n\n    return container;\n  }\n\n  function buildResolver() {\n    var resolver = Resolver['default'].create({\n      namespace: Ember['default'].Namespace.create({\n        modulePrefix: \"dummy\"\n      })\n    });\n\n    function resolve(fullName) {\n      return resolver.resolve(fullName);\n    }\n\n    resolve.describe = function (fullName) {\n      return resolver.lookupDescription(fullName);\n    };\n\n    resolve.makeToString = function (factory, fullName) {\n      return resolver.makeToString(factory, fullName);\n    };\n\n    resolve.normalize = function (fullName) {\n      if (resolver.normalize) {\n        return resolver.normalize(fullName);\n      } else {\n        Ember['default'].deprecate(\"The Resolver should now provide a 'normalize' function\", false);\n        return fullName;\n      }\n    };\n\n    resolve.__resolver__ = resolver;\n\n    return resolve;\n  }\n\n});","define('dummy/tests/helpers/container.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/container.js should pass jshint', function() { \n    ok(true, 'helpers/container.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/validator-assertions', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.pass = pass;\n  exports.fail = fail;\n\n  function pass(assert) {\n    assert.ok(true, \"validation is working\");\n  }\n\n  function fail(assert) {\n    assert.ok(false, \"validation is not working\");\n  }\n\n});","define('dummy/tests/helpers/validator-assertions.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/validator-assertions.js should pass jshint', function() { \n    ok(true, 'helpers/validator-assertions.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/conditional-validators-test', ['ember', 'qunit', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Mixin, container) {\n\n  'use strict';\n\n  var user, User, promise;\n  var get = Ember['default'].get;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Conditional validations\", {\n    setup: function setup() {\n      User = Ember['default'].Object.extend(Mixin['default'], {\n        container: container.buildContainer()\n      });\n    }\n  });\n\n  qunit.test(\"if with function\", function (assert) {\n    assert.expect(4);\n    User.reopen({\n      validations: {\n        firstName: {\n          presence: {\n            \"if\": function _if(model) {\n              return false;\n            }\n          }\n        }\n      }\n    });\n\n    run(function () {\n      user = User.create();\n      promise = user.validate().then(function () {\n        assert.ok(Ember['default'].isEmpty(get(user.errors, \"firstName\")));\n        var validator = get(user.validators, \"firstObject\");\n        validator.conditionals[\"if\"] = function (model, property) {\n          assert.equal(user, model, \"the conditional validator is passed the model being validated\");\n          assert.equal(property, \"firstName\", \"the conditional validator is passed the name of the property being validated\");\n          return true;\n        };\n        user.validate().then(null, function () {\n          assert.deepEqual(get(user.errors, \"firstName\"), [\"can't be blank\"]);\n        });\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"if with property reference\", function (assert) {\n    User.reopen({\n      validations: {\n        firstName: {\n          presence: {\n            \"if\": \"canValidate\"\n          }\n        }\n      }\n    });\n\n    run(function () {\n      user = User.create();\n      set(user, \"canValidate\", false);\n      promise = user.validate().then(function () {\n        assert.ok(Ember['default'].isEmpty(get(user.errors, \"firstName\")));\n        set(user, \"canValidate\", true);\n        user.validate().then(null, function () {\n          assert.deepEqual(get(user.errors, \"firstName\"), [\"can't be blank\"]);\n        });\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"if with function reference\", function (assert) {\n    User.reopen({\n      validations: {\n        firstName: {\n          presence: {\n            \"if\": \"canValidate\"\n          }\n        }\n      },\n      canValidate: function canValidate() {\n        return false;\n      }\n    });\n\n    run(function () {\n      user = User.create();\n      promise = user.validate().then(function () {\n        assert.ok(Ember['default'].isEmpty(get(user.errors, \"firstName\")));\n        set(user, \"canValidate\", true);\n        user.canValidate = function () {\n          return true;\n        };\n        user.validate().then(null, function () {\n          assert.deepEqual(get(user.errors, \"firstName\"), [\"can't be blank\"]);\n        });\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"unless with function\", function (assert) {\n    assert.expect(4);\n    User.reopen({\n      validations: {\n        firstName: {\n          presence: {\n            unless: function unless(model) {\n              return true;\n            }\n          }\n        }\n      }\n    });\n\n    run(function () {\n      user = User.create();\n      promise = user.validate().then(function () {\n        assert.ok(Ember['default'].isEmpty(get(user.errors, \"firstName\")));\n        var validator = get(user.validators, \"firstObject\");\n        validator.conditionals.unless = function (model, property) {\n          assert.equal(user, model, \"the conditional validator is passed the model being validated\");\n          assert.equal(property, \"firstName\", \"the conditional validator is passed the name of the property being validated\");\n          return false;\n        };\n        user.validate().then(null, function () {\n          assert.deepEqual(get(user.errors, \"firstName\"), [\"can't be blank\"]);\n        });\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"unless with property reference\", function (assert) {\n    User.reopen({\n      validations: {\n        firstName: {\n          presence: {\n            unless: \"canValidate\"\n          }\n        }\n      },\n      canValidate: true\n    });\n\n    run(function () {\n      user = User.create();\n      promise = user.validate().then(function () {\n        assert.ok(Ember['default'].isEmpty(get(user.errors, \"firstName\")));\n        set(user, \"canValidate\", false);\n        user.validate().then(null, function () {\n          assert.deepEqual(get(user.errors, \"firstName\"), [\"can't be blank\"]);\n        });\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"unless with function reference\", function (assert) {\n    User.reopen({\n      validations: {\n        firstName: {\n          presence: {\n            unless: \"canValidate\"\n          }\n        }\n      },\n      canValidate: function canValidate() {\n        return true;\n      }\n    });\n\n    run(function () {\n      user = User.create();\n      promise = user.validate().then(function () {\n        assert.ok(Ember['default'].isEmpty(get(user.errors, \"firstName\")));\n        set(user, \"canValidate\", true);\n        user.canValidate = function () {\n          return false;\n        };\n        user.validate().then(null, function () {\n          assert.deepEqual(get(user.errors, \"firstName\"), [\"can't be blank\"]);\n        });\n      });\n    });\n\n    return promise;\n  });\n\n});","define('dummy/tests/unit/conditional-validators-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/conditional-validators-test.js should pass jshint', function() { \n    ok(true, 'unit/conditional-validators-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/controller-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:foo\", \"Controller sanity test\", {\n    needs: [\"ember-validations@validator:local/presence\"]\n  });\n\n  ember_qunit.test(\"does not blow up\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n});","define('dummy/tests/unit/controller-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/controller-test.js should pass jshint', function() { \n    ok(true, 'unit/controller-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/errors-test', ['ember', 'qunit', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Mixin, container) {\n\n  'use strict';\n\n  var user, User;\n  var get = Ember['default'].get;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Errors test\", {\n    setup: function setup() {\n      User = Ember['default'].Object.extend(Mixin['default'], {\n        container: container.buildContainer(),\n        validations: {\n          name: {\n            presence: true\n          },\n          age: {\n            presence: true,\n            numericality: true\n          }\n        }\n      });\n    },\n    teardown: function teardown() {\n      delete Ember['default'].I18n;\n    }\n  });\n\n  qunit.test(\"validations are run on instantiation\", function (assert) {\n    run(function () {\n      user = User.create();\n    });\n    assert.equal(get(user, \"isValid\"), false);\n    assert.deepEqual(get(user, \"errors.name\"), [\"can't be blank\"]);\n    assert.deepEqual(get(user, \"errors.age\"), [\"can't be blank\", \"is not a number\"]);\n    run(function () {\n      user = User.create({ name: \"Brian\", age: 33 });\n    });\n    assert.ok(get(user, \"isValid\"));\n    assert.ok(Ember['default'].isEmpty(get(user, \"errors.name\")));\n    assert.ok(Ember['default'].isEmpty(get(user, \"errors.age\")));\n  });\n\n  qunit.test(\"when errors are resolved\", function (assert) {\n    run(function () {\n      user = User.create();\n    });\n    assert.equal(get(user, \"isValid\"), false);\n    assert.deepEqual(get(user, \"errors.name\"), [\"can't be blank\"]);\n    assert.deepEqual(get(user, \"errors.age\"), [\"can't be blank\", \"is not a number\"]);\n    run(function () {\n      set(user, \"name\", \"Brian\");\n    });\n    assert.equal(get(user, \"isValid\"), false);\n    assert.ok(Ember['default'].isEmpty(get(user, \"errors.name\")));\n    assert.deepEqual(get(user, \"errors.age\"), [\"can't be blank\", \"is not a number\"]);\n    run(function () {\n      set(user, \"age\", \"thirty three\");\n    });\n    assert.equal(get(user, \"isValid\"), false);\n    assert.ok(Ember['default'].isEmpty(get(user, \"errors.name\")));\n    assert.deepEqual(get(user, \"errors.age\"), [\"is not a number\"]);\n    run(function () {\n      set(user, \"age\", 33);\n    });\n    assert.ok(get(user, \"isValid\"));\n    assert.ok(Ember['default'].isEmpty(get(user, \"errors.name\")));\n    assert.ok(Ember['default'].isEmpty(get(user, \"errors.age\")));\n  });\n\n  // test('validations use Ember.I18n.t to render the message if Ember.I18n is present', function() {\n  // Ember.I18n = {\n  // translations: {\n  // errors: {\n  // blank: 'muss ausgefüllt werden',\n  // notANumber: 'ist keine Zahl'\n  // }\n  // },\n  // lookupKey: function(key, hash) {\n  // var firstKey, idx, remainingKeys;\n\n  // if (hash[key] !== null && hash[key] !== undefined) { return hash[key]; }\n\n  // if ((idx = key.indexOf('.')) !== -1) {\n  // firstKey = key.substr(0, idx);\n  // remainingKeys = key.substr(idx + 1);\n  // hash = hash[firstKey];\n  // if (hash) { return Ember.I18n.lookupKey(remainingKeys, hash); }\n  // }\n  // },\n  // t: function(key, context) {\n  // return Ember.I18n.lookupKey(key, Ember.I18n.translations);\n  // }\n  // };\n\n  // run(function() {\n  // user = User.create();\n  // });\n  // equal(get(user, 'isValid'), false);\n  // assert.deepEqual(get(user, 'errors.name'), ['muss ausgefüllt werden']);\n  // assert.deepEqual(get(user, 'errors.age'), ['muss ausgefüllt werden', 'ist keine Zahl']);\n  // run(function() {\n  // set(user, 'age', 'thirty three');\n  // });\n  // equal(get(user, 'isValid'), false);\n  // assert.deepEqual(get(user, 'errors.age'), ['ist keine Zahl']);\n  // });\n\n});","define('dummy/tests/unit/errors-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/errors-test.js should pass jshint', function() { \n    ok(true, 'unit/errors-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validate-test', ['ember', 'qunit', 'ember-validations', 'dummy/tests/helpers/container', 'ember-validations/validators/base'], function (Ember, qunit, EmberValidations, helpers__container, Base) {\n\n  'use strict';\n\n  var user, User, promise;\n  var get = Ember['default'].get;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Validate test\", {\n    setup: function setup() {\n      User = Ember['default'].Object.extend(EmberValidations['default'].Mixin, {\n        container: helpers__container.buildContainer(),\n        validations: {\n          firstName: {\n            presence: true,\n            length: 5\n          },\n          lastName: {\n            format: { \"with\": /\\w+/ }\n          }\n        }\n      });\n      run(function () {\n        user = User.create();\n      });\n    }\n  });\n\n  qunit.test(\"returns a promise\", function (assert) {\n    run(function () {\n      promise = user.validate().then(function () {\n        assert.ok(false, \"expected validation failed\");\n      }, function () {\n        assert.equal(get(user, \"isValid\"), false);\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"isInvalid tracks isValid\", function (assert) {\n    assert.equal(get(user, \"isInvalid\"), true);\n    run(function () {\n      user.setProperties({ firstName: \"Brian\", lastName: \"Cardarella\" });\n    });\n    assert.equal(get(user, \"isInvalid\"), false);\n  });\n\n  qunit.test(\"runs all validations\", function (assert) {\n    run(function () {\n      promise = user.validate().then(null, function (errors) {\n        assert.deepEqual(get(errors, \"firstName\"), [\"can't be blank\", \"is the wrong length (should be 5 characters)\"]);\n        assert.deepEqual(get(errors, \"lastName\"), [\"is invalid\"]);\n        assert.equal(get(user, \"isValid\"), false);\n        set(user, \"firstName\", \"Bob\");\n        user.validate(\"firstName\").then(null, function (errors) {\n          assert.deepEqual(get(errors, \"firstName\"), [\"is the wrong length (should be 5 characters)\"]);\n          assert.equal(get(user, \"isValid\"), false);\n          set(user, \"firstName\", \"Brian\");\n          set(user, \"lastName\", \"Cardarella\");\n          user.validate().then(function (errors) {\n            assert.ok(Ember['default'].isEmpty(get(errors, \"firstName\")));\n            assert.ok(Ember['default'].isEmpty(get(errors, \"lastName\")));\n            assert.equal(get(user, \"isValid\"), true);\n          });\n        });\n      });\n    });\n\n    return promise;\n  });\n\n  qunit.test(\"can be mixed into an object controller\", function (assert) {\n    var Controller, controller, user;\n    Controller = Ember['default'].ObjectController.extend(EmberValidations['default'].Mixin, {\n      container: helpers__container.buildContainer(),\n      validations: {\n        name: {\n          presence: true\n        }\n      }\n    });\n\n    run(function () {\n      controller = Controller.create();\n    });\n    assert.equal(get(controller, \"isValid\"), false);\n    user = Ember['default'].Object.create();\n    run(function () {\n      set(controller, \"content\", user);\n    });\n    assert.equal(get(controller, \"isValid\"), false);\n    run(function () {\n      set(user, \"name\", \"Brian\");\n    });\n    assert.equal(get(controller, \"isValid\"), true);\n  });\n\n  qunit.module(\"Array controller\");\n\n  qunit.test(\"can be mixed into an array controller\", function (assert) {\n    var Controller, controller, user, UserController;\n    var container = helpers__container.buildContainer();\n\n    UserController = Ember['default'].ObjectController.extend(EmberValidations['default'].Mixin, {\n      container: helpers__container.buildContainer(),\n      validations: {\n        name: {\n          presence: true\n        }\n      }\n    });\n    container.register(\"controller:User\", UserController);\n    Controller = Ember['default'].ArrayController.extend(EmberValidations['default'].Mixin, {\n      itemController: \"User\",\n      container: container,\n      validations: {\n        \"[]\": true\n      }\n    });\n\n    run(function () {\n      controller = Controller.create();\n    });\n    assert.equal(get(controller, \"isValid\"), true);\n    user = Ember['default'].Object.create();\n    run(function () {\n      controller.pushObject(user);\n    });\n    assert.equal(get(controller, \"isValid\"), false);\n    run(function () {\n      set(user, \"name\", \"Brian\");\n    });\n    assert.equal(get(controller, \"isValid\"), true);\n    run(function () {\n      set(user, \"name\", undefined);\n    });\n    assert.equal(get(controller, \"isValid\"), false);\n    run(function () {\n      get(controller, \"content\").removeObject(user);\n    });\n    assert.equal(get(controller, \"isValid\"), true);\n  });\n\n  var Profile, profile;\n\n  qunit.module(\"Relationship validators\", {\n    setup: function setup() {\n      Profile = Ember['default'].Object.extend(EmberValidations['default'].Mixin, {\n        container: helpers__container.buildContainer(),\n        validations: {\n          title: {\n            presence: true\n          }\n        }\n      });\n\n      run(function () {\n        profile = Profile.create({ hey: \"yo\" });\n      });\n\n      User = Ember['default'].Object.extend(EmberValidations['default'].Mixin, {\n        container: helpers__container.buildContainer()\n      });\n    }\n  });\n\n  qunit.test(\"validates other validatable property\", function (assert) {\n    run(function () {\n      user = User.create({\n        validations: {\n          profile: true\n        }\n      });\n    });\n    assert.equal(get(user, \"isValid\"), true);\n    run(function () {\n      set(user, \"profile\", profile);\n    });\n    assert.equal(get(user, \"isValid\"), false);\n    run(function () {\n      set(profile, \"title\", \"Developer\");\n    });\n    assert.equal(get(user, \"isValid\"), true);\n  });\n\n  // test('validates custom validator', function() {\n  // run(function() {\n  // user = User.create({\n  // profile: profile,\n  // validations: [AgeValidator]\n  // });\n  // });\n  // equal(get(user, 'isValid'), false);\n  // run(function() {\n  // set(user, 'age', 22);\n  // });\n  // equal(get(user, 'isValid'), true);\n  // });\n\n  qunit.test(\"validates array of validable objects\", function (assert) {\n    var friend1, friend2;\n\n    run(function () {\n      user = User.create({\n        validations: {\n          friends: true\n        }\n      });\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n\n    run(function () {\n      set(user, \"friends\", Ember['default'].A());\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n\n    run(function () {\n      friend1 = User.create({\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n    });\n\n    run(function () {\n      user.friends.pushObject(friend1);\n    });\n\n    assert.equal(get(user, \"isValid\"), false);\n\n    run(function () {\n      set(friend1, \"name\", \"Stephanie\");\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n\n    run(function () {\n      friend2 = User.create({\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n\n      user.friends.pushObject(friend2);\n    });\n\n    assert.equal(get(user, \"isValid\"), false);\n\n    run(function () {\n      user.friends.removeObject(friend2);\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n  });\n\n  qunit.test(\"revalidates arrays when they are replaced\", function (assert) {\n    var friend1, friend2;\n\n    run(function () {\n      user = User.create({\n        validations: {\n          friends: true\n        }\n      });\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n\n    run(function () {\n      set(user, \"friends\", Ember['default'].A());\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n\n    run(function () {\n      friend1 = User.create({\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n    });\n\n    run(function () {\n      set(user, \"friends\", Ember['default'].A([friend1]));\n    });\n\n    assert.equal(get(user, \"isValid\"), false);\n\n    run(function () {\n      set(friend1, \"name\", \"Stephanie\");\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n\n    run(function () {\n      friend2 = User.create({\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n\n      set(user, \"friends\", Ember['default'].A([friend1, friend2]));\n    });\n\n    assert.equal(get(user, \"isValid\"), false);\n\n    run(function () {\n      user.friends.removeObject(friend2);\n    });\n\n    assert.equal(get(user, \"isValid\"), true);\n  });\n\n  /*globals define, registry, requirejs*/\n\n  requirejs.rollback = function () {\n    for (var entry in this.backupEntries) {\n      this.entries[entry] = this.backupEntries[entry];\n    }\n  };\n\n  requirejs.backup = function () {\n    this.backupEntries = {};\n\n    for (var entry in this.entries) {\n      this.backupEntries[entry] = this.entries[entry];\n    }\n  };\n\n  qunit.module(\"validator class lookup order\", {\n    setup: function setup() {\n      requirejs.backup();\n      requirejs.clear();\n      requirejs.rollback();\n\n      User = Ember['default'].Object.extend(EmberValidations['default'].Mixin, {\n        container: helpers__container.buildContainer()\n      });\n    },\n    teardown: function teardown() {\n      requirejs.clear();\n      requirejs.rollback();\n    }\n  });\n\n  qunit.test(\"should lookup in project namespace first\", function (assert) {\n    var dummyValidatorCalled = false;\n    var nativeValidatorCalled = false;\n\n    define(\"ember-validations/validators/local/presence\", [], function () {\n      nativeValidatorCalled = true;\n\n      return Base['default'].extend({\n        call: Ember['default'].K\n      });\n    });\n\n    define(\"dummy/validators/local/presence\", [], function () {\n      dummyValidatorCalled = true;\n\n      return Base['default'].extend({\n        call: Ember['default'].K\n      });\n    });\n\n    run(function () {\n      user = User.create({\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n    });\n\n    assert.ok(!nativeValidatorCalled, \"should not have preferred ember-validation's presence validator\");\n    assert.ok(dummyValidatorCalled, \"should have preferred my applications presence validator\");\n  });\n\n  qunit.test(\"will lookup both local and remote validators of similar name\", function (assert) {\n    var localValidatorCalled = false;\n    var remoteValidatorCalled = false;\n\n    define(\"ember-validations/validators/local/uniqueness\", [], function () {\n      localValidatorCalled = true;\n\n      return Base['default'].extend({\n        call: Ember['default'].K\n      });\n    });\n\n    define(\"ember-validations/validators/remote/uniqueness\", [], function () {\n      remoteValidatorCalled = true;\n\n      return Base['default'].extend({\n        call: Ember['default'].K\n      });\n    });\n\n    run(function () {\n      user = User.create({\n        validations: {\n          name: {\n            uniqueness: true\n          }\n        }\n      });\n    });\n\n    assert.ok(localValidatorCalled, \"should call local uniqueness validator\");\n    assert.ok(remoteValidatorCalled, \"should call remote uniqueness validator\");\n  });\n\n  qunit.test(\"should prefer lookup in just \\\"validators\\\" before \\\"native\\\"\", function (assert) {\n    var dummyValidatorCalled = false;\n    var nativeValidatorCalled = false;\n\n    define(\"ember-validations/validators/local/presence\", [], function () {\n      nativeValidatorCalled = true;\n\n      return Base['default'].extend({\n        call: Ember['default'].K\n      });\n    });\n\n    define(\"dummy/validators/presence\", [], function () {\n      dummyValidatorCalled = true;\n\n      return Base['default'].extend({\n        call: Ember['default'].K\n      });\n    });\n\n    run(function () {\n      user = User.create({\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n    });\n\n    assert.ok(!nativeValidatorCalled, \"should not have preferred ember-validation's presence validator\");\n    assert.ok(dummyValidatorCalled, \"should have preferred my applications presence validator\");\n  });\n\n  qunit.test(\"should store validators in cache for faster lookup\", function (assert) {\n    var validatorResolvedCount = 0;\n\n    var container = helpers__container.buildContainer();\n\n    var oldLookupFactory = container.lookupFactory;\n\n    container.lookupFactory = function (fullName) {\n      validatorResolvedCount += 1;\n      return oldLookupFactory.call(container, fullName);\n    };\n\n    var user2;\n\n    run(function () {\n      user = User.create({\n        container: container,\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n\n      validatorResolvedCount = 0;\n\n      user2 = User.create({\n        container: container,\n        validations: {\n          name: {\n            presence: true\n          }\n        }\n      });\n    });\n\n    container.lookupFactory = oldLookupFactory;\n\n    assert.ok(!get(user, \"isValid\"));\n    assert.ok(!get(user2, \"isValid\"));\n    assert.equal(0, validatorResolvedCount);\n  });\n\n  qunit.module(\"inline validations\", {\n    setup: function setup() {\n      User = Ember['default'].Object.extend(EmberValidations['default'].Mixin, {\n        container: helpers__container.buildContainer()\n      });\n    }\n  });\n\n  qunit.test(\"mixed validation syntax\", function (assert) {\n    run(function () {\n      user = User.create({\n        validations: {\n          name: {\n            inline: EmberValidations['default'].validator(function () {\n              return \"it failed\";\n            })\n          }\n        }\n      });\n    });\n\n    assert.deepEqual([\"it failed\"], get(user, \"errors.name\"));\n  });\n\n  qunit.test(\"concise validation syntax\", function (assert) {\n    run(function () {\n      user = User.create({\n        validations: {\n          name: EmberValidations['default'].validator(function () {\n            return \"it failed\";\n          })\n        }\n      });\n    });\n\n    assert.deepEqual([\"it failed\"], get(user, \"errors.name\"));\n  });\n\n});","define('dummy/tests/unit/validate-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/validate-test.js should pass jshint', function() { \n    ok(true, 'unit/validate-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/base-test', ['ember', 'qunit', 'ember-validations/validators/base'], function (Ember, qunit, Base) {\n\n  'use strict';\n\n  var model, Model, options, CustomValidator, validator;\n  var get = Ember['default'].get;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Base Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend({\n        dependentValidationKeys: {}\n      });\n      CustomValidator = Base['default'].extend({\n        init: function init() {\n          this._super();\n          this.dependentValidationKeys.pushObject(\"otherAttribute\");\n        },\n        call: function call() {}\n      });\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when value is not empty\", function (assert) {\n    run(function () {\n      validator = CustomValidator.create({ model: model, property: \"attribute\" });\n    });\n    assert.equal(get(validator, \"isValid\"), true);\n  });\n\n  qunit.test(\"validator has isInvalid flag\", function (assert) {\n    run(function () {\n      validator = CustomValidator.create({ model: model, property: \"attribute\" });\n    });\n    assert.equal(get(validator, \"isInvalid\"), false);\n  });\n\n  qunit.test(\"generates dependentValidationKeys on the model\", function (assert) {\n    run(function () {\n      validator = CustomValidator.create({ model: model, property: \"attribute\" });\n    });\n    assert.deepEqual(get(model, \"dependentValidationKeys\"), { attribute: [\"otherAttribute\"] });\n  });\n\n  qunit.test(\"inactive validators should be considered valid\", function (assert) {\n    var canValidate = true;\n    run(function () {\n      validator = CustomValidator.createWithMixins({\n        model: model,\n        property: \"attribute\",\n        canValidate: (function (_canValidate) {\n          var _canValidateWrapper = function canValidate() {\n            return _canValidate.apply(this, arguments);\n          };\n\n          _canValidateWrapper.toString = function () {\n            return _canValidate.toString();\n          };\n\n          return _canValidateWrapper;\n        })(function () {\n          return canValidate;\n        }),\n        call: function call() {\n          this.errors.pushObject(\"nope\");\n        }\n      });\n    });\n    assert.equal(get(validator, \"isValid\"), false);\n    canValidate = false;\n    run(validator, \"validate\");\n    assert.equal(get(validator, \"isValid\"), true);\n  });\n\n});","define('dummy/tests/unit/validators/base-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators');\n  test('unit/validators/base-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/base-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/absence-test', ['ember', 'qunit', 'ember-validations/validators/local/absence'], function (Ember, qunit, Absence) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Absence Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend({\n        dependentValidationKeys: {}\n      });\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when value is not empty\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Absence['default'].create({ model: model, property: \"attribute\", options: options });\n    });\n    assert.deepEqual(validator.errors, []);\n    run(function () {\n      set(model, \"attribute\", \"not empty\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when value is made empty\", function (assert) {\n    set(model, \"attribute\", \"not empty\");\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Absence['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", undefined);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when options is true\", function (assert) {\n    options = true;\n    run(function () {\n      validator = Absence['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"not empty\");\n    });\n    assert.deepEqual(validator.errors, [\"must be blank\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/absence-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/absence-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/absence-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/acceptance-test', ['ember', 'qunit', 'ember-validations/validators/local/acceptance'], function (Ember, qunit, Acceptance) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Acceptance Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend({\n        dependentValidationKeys: {}\n      });\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when attribute is true\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", true);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when attribute is not true\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", false);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when attribute is value of 1\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when attribute value is 2 and accept value is 2\", function (assert) {\n    options = { message: \"failed validation\", accept: 2 };\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 2);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when attribute value is 1 and accept value is 2\", function (assert) {\n    options = { message: \"failed validation\", accept: 2 };\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when options is true\", function (assert) {\n    options = true;\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", false);\n    });\n    assert.deepEqual(validator.errors, [\"must be accepted\"]);\n  });\n\n  qunit.test(\"when no message is passed\", function (assert) {\n    options = { accept: 2 };\n    run(function () {\n      validator = Acceptance['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", false);\n    });\n    assert.deepEqual(validator.errors, [\"must be accepted\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/acceptance-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/acceptance-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/acceptance-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/confirmation-test', ['ember', 'qunit', 'ember-validations/validators/local/confirmation', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Confirmation, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var get = Ember['default'].get;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Confirmation Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default'], {\n        container: container.buildContainer()\n      });\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when values match\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Confirmation['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"test\");\n      set(model, \"attributeConfirmation\", \"test\");\n    });\n    assert.deepEqual(validator.errors, []);\n    run(function () {\n      set(model, \"attributeConfirmation\", \"newTest\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n    run(function () {\n      set(model, \"attribute\", \"newTest\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when values do not match\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Confirmation['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"test\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when original is null\", function (assert) {\n    run(function () {\n      validator = Confirmation['default'].create({ model: model, property: \"attribute\" });\n      model.set(\"attribute\", null);\n    });\n    assert.ok(Ember['default'].isEmpty(validator.errors));\n  });\n\n  qunit.test(\"when confirmation is null\", function (assert) {\n    run(function () {\n      validator = Confirmation['default'].create({ model: model, property: \"attribute\" });\n      model.set(\"attributeConfirmation\", null);\n    });\n    assert.ok(Ember['default'].isEmpty(validator.errors));\n  });\n\n  qunit.test(\"when options is true\", function (assert) {\n    options = true;\n    run(function () {\n      validator = Confirmation['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"test\");\n    });\n    assert.deepEqual(validator.errors, [\"doesn't match attribute\"]);\n  });\n\n  qunit.test(\"message integration on model, prints message on Confirmation property\", function (assert) {\n    var otherModel,\n        OtherModel = Model.extend({\n      validations: {\n        attribute: {\n          confirmation: true\n        }\n      }\n    });\n\n    run(function () {\n      otherModel = OtherModel.create();\n      set(otherModel, \"attribute\", \"test\");\n    });\n\n    assert.deepEqual(get(otherModel, \"errors.attributeConfirmation\"), [\"doesn't match attribute\"]);\n    assert.deepEqual(get(otherModel, \"errors.attribute\"), []);\n  });\n\n});","define('dummy/tests/unit/validators/local/confirmation-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/confirmation-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/confirmation-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/exclusion-test', ['ember', 'qunit', 'ember-validations/validators/local/exclusion', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Exclusion, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Exclusion Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default']);\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when value is not in the list\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 4);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is in the list\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowing blank\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3], allowBlank: true };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when not allowing blank\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when value is not in the range\", function (assert) {\n    options = { message: \"failed validation\", range: [1, 3] };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 4);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is in the range\", function (assert) {\n    options = { message: \"failed validation\", range: [1, 3] };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when options is an array\", function (assert) {\n    options = [1, 2, 3];\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is reserved\"]);\n  });\n\n  qunit.test(\"when no message is passed\", function (assert) {\n    options = { \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Exclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is reserved\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/exclusion-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/exclusion-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/exclusion-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/format-test', ['ember', 'qunit', 'ember-validations/validators/local/format', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Format, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Format Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default']);\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when matching format\", function (assert) {\n    options = { message: \"failed validation\", \"with\": /\\d+/ };\n    run(function () {\n      validator = Format['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"123\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when not matching format\", function (assert) {\n    options = { message: \"failed validation\", \"with\": /\\d+/ };\n    run(function () {\n      validator = Format['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"abc\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowing blank\", function (assert) {\n    options = { message: \"failed validation\", \"with\": /\\d+/, allowBlank: true };\n    run(function () {\n      validator = Format['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when not allowing blank\", function (assert) {\n    options = { message: \"failed validation\", \"with\": /\\d+/ };\n    run(function () {\n      validator = Format['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when options is regexp\", function (assert) {\n    options = /\\d+/;\n    run(function () {\n      validator = Format['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is invalid\"]);\n  });\n\n  qunit.test(\"when no message is passed\", function (assert) {\n    options = { \"with\": /\\d+/ };\n    run(function () {\n      validator = Format['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is invalid\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/format-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/format-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/format-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/inclusion-test', ['ember', 'qunit', 'ember-validations/validators/local/inclusion', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Inclusion, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Inclusion Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default']);\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when value is in the list\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is not in the list\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 4);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowing blank\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3], allowBlank: true };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when not allowing blank\", function (assert) {\n    options = { message: \"failed validation\", \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when value is in the range\", function (assert) {\n    options = { message: \"failed validation\", range: [1, 3] };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is not in the range\", function (assert) {\n    options = { message: \"failed validation\", range: [1, 3] };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 4);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when options is array\", function (assert) {\n    options = [1, 2, 3];\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is not included in the list\"]);\n  });\n\n  qunit.test(\"when no message is passed\", function (assert) {\n    options = { \"in\": [1, 2, 3] };\n    run(function () {\n      validator = Inclusion['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is not included in the list\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/inclusion-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/inclusion-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/inclusion-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/length-test', ['ember', 'qunit', 'ember-validations/validators/local/length', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Length, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Length Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default']);\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when allowed length is 3 and value length is 3\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"123\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when allowed length is 3 and value length is 4\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"1234\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowed length is 3 and value length is 2\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"12\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowing blank and allowed length is 3\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3, allowBlank: true };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when allowing blank and minimum length is 3 and maximum length is 100\", function (assert) {\n    options = { messages: { tooShort: \"failed minimum validation\", tooLong: \"failed maximum validation\" }, minimum: 3, maximum: 100, allowBlank: true };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when not allowing blank and allowed length is 3\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowed length is 3 and a different tokenizer\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3, tokenizer: function tokenizer(value) {\n        return value.split(\" \");\n      } };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"one two three\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when allowed length minimum is 3 and value length is 3\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"123\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when allowed length minimum is 3 and value length is 2\", function (assert) {\n    options = { messages: { tooShort: \"failed validation\" }, minimum: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"12\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowed length maximum is 3 and value length is 3\", function (assert) {\n    options = { messages: { wrongLength: \"failed validation\" }, is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"123\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when allowed length maximum is 3 and value length is 4\", function (assert) {\n    options = { messages: { tooLong: \"failed validation\" }, maximum: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"1234\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when allowed length maximum is 3 and value is blank\", function (assert) {\n    options = { maximum: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when options is a number\", function (assert) {\n    set(model, \"attribute\", \"1234\");\n    options = 3;\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is the wrong length (should be 3 characters)\"]);\n  });\n\n  qunit.test(\"when options is a number and value is undefined\", function (assert) {\n    options = 3;\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is the wrong length (should be 3 characters)\"]);\n  });\n\n  qunit.test(\"when allowed length is 3, value length is 4 and no message is set\", function (assert) {\n    options = { is: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"1234\");\n    });\n    assert.deepEqual(validator.errors, [\"is the wrong length (should be 3 characters)\"]);\n  });\n\n  qunit.test(\"when allowed length minimum is 3, value length is 2 and no message is set\", function (assert) {\n    options = { minimum: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"12\");\n    });\n    assert.deepEqual(validator.errors, [\"is too short (minimum is 3 characters)\"]);\n  });\n\n  qunit.test(\"when allowed length maximum is 3, value length is 4 and no message is set\", function (assert) {\n    options = { maximum: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"1234\");\n    });\n    assert.deepEqual(validator.errors, [\"is too long (maximum is 3 characters)\"]);\n  });\n\n  qunit.test(\"when value is non-string, then the value is still checked\", function (assert) {\n    options = { maximum: 3 };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1234);\n    });\n    assert.deepEqual(validator.errors, [\"is too long (maximum is 3 characters)\"]);\n  });\n\n  qunit.test(\"when using a property instead of a number\", function (assert) {\n    options = { is: \"countProperty\" };\n    run(function () {\n      validator = Length['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"123\");\n    });\n    assert.deepEqual(validator.errors, [\"is the wrong length (should be 0 characters)\"]);\n    run(function () {\n      set(model, \"countProperty\", 3);\n    });\n    assert.deepEqual(validator.errors, []);\n    run(function () {\n      set(model, \"countProperty\", 5);\n    });\n    assert.deepEqual(validator.errors, [\"is the wrong length (should be 5 characters)\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/length-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/length-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/length-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/numericality-test', ['ember', 'qunit', 'ember-validations/validators/local/numericality', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Numericality, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Numericality Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default']);\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when value is a number\", function (assert) {\n    options = { messages: { numericality: \"failed validation\" } };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 123);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is a decimal number\", function (assert) {\n    options = { messages: { numericality: \"failed validation\" } };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 123.456);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is not a number\", function (assert) {\n    options = { messages: { numericality: \"failed validation\" } };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"abc123\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when no value\", function (assert) {\n    options = { messages: { numericality: \"failed validation\" } };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when no value and allowing blank\", function (assert) {\n    options = { messages: { numericality: \"failed validation\" }, allowBlank: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when bad value and allowing blank\", function (assert) {\n    options = { messages: { numericality: \"failed validation\" }, allowBlank: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"abc123\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when only allowing integers and value is integer\", function (assert) {\n    options = { messages: { onlyInteger: \"failed validation\", numericality: \"failed validation\" }, onlyInteger: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 123);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing integers and value is not integer\", function (assert) {\n    options = { messages: { onlyInteger: \"failed integer validation\", numericality: \"failed validation\" }, onlyInteger: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 123.456);\n    });\n    assert.deepEqual(validator.errors, [\"failed integer validation\"]);\n  });\n\n  qunit.test(\"when only integer and no message is passed\", function (assert) {\n    options = { onlyInteger: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1.1);\n    });\n    assert.deepEqual(validator.errors, [\"must be an integer\"]);\n  });\n\n  qunit.test(\"when only integer is passed directly\", function (assert) {\n    options = \"onlyInteger\";\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1.1);\n    });\n    assert.deepEqual(validator.errors, [\"must be an integer\"]);\n  });\n\n  qunit.test(\"when only allowing values greater than 10 and value is greater than 10\", function (assert) {\n    options = { messages: { greaterThan: \"failed validation\", numericality: \"failed validation\" }, greaterThan: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing values greater than 10 and value is 10\", function (assert) {\n    options = { messages: { greaterThan: \"failed validation\", numericality: \"failed validation\" }, greaterThan: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when only allowing values greater than or assert.deepEqual to 10 and value is 10\", function (assert) {\n    options = { messages: { greaterThanOrEqualTo: \"failed validation\", numericality: \"failed validation\" }, greaterThanOrEqualTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing values greater than or assert.deepEqual to 10 and value is 9\", function (assert) {\n    options = { messages: { greaterThanOrEqualTo: \"failed validation\", numericality: \"failed validation\" }, greaterThanOrEqualTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 9);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when only allowing values less than 10 and value is less than 10\", function (assert) {\n    options = { messages: { lessThan: \"failed validation\", numericality: \"failed validation\" }, lessThan: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 9);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing values less than 10 and value is 10\", function (assert) {\n    options = { messages: { lessThan: \"failed validation\", numericality: \"failed validation\" }, lessThan: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when only allowing values less than or assert.deepEqual to 10 and value is 10\", function (assert) {\n    options = { messages: { lessThanOrEqualTo: \"failed validation\", numericality: \"failed validation\" }, lessThanOrEqualTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing values less than or assert.deepEqual to 10 and value is 11\", function (assert) {\n    options = { messages: { lessThanOrEqualTo: \"failed validation\", numericality: \"failed validation\" }, lessThanOrEqualTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n      assert.deepEqual(validator.errors, [\"failed validation\"]);\n    });\n  });\n\n  qunit.test(\"when only allowing values equal to 10 and value is 10\", function (assert) {\n    options = { messages: { equalTo: \"failed validation\", numericality: \"failed validation\" }, equalTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing values equal to 10 and value is 11\", function (assert) {\n    options = { messages: { equalTo: \"failed equal validation\", numericality: \"failed validation\" }, equalTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, [\"failed equal validation\"]);\n  });\n\n  qunit.test(\"when only allowing value equal to 0 and value is 1\", function (assert) {\n    options = { messages: { equalTo: \"failed equal validation\", numericality: \"failed validation\" }, equalTo: 0 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 1);\n    });\n    assert.deepEqual(validator.errors, [\"failed equal validation\"]);\n  });\n\n  qunit.test(\"when only allowing odd values and the value is odd\", function (assert) {\n    options = { messages: { odd: \"failed validation\", numericality: \"failed validation\" }, odd: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing odd values and the value is even\", function (assert) {\n    options = { messages: { odd: \"failed validation\", numericality: \"failed validation\" }, odd: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when only allowing even values and the value is even\", function (assert) {\n    options = { messages: { even: \"failed validation\", numericality: \"failed validation\" }, even: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when only allowing even values and the value is odd\", function (assert) {\n    options = { messages: { even: \"failed validation\", numericality: \"failed validation\" }, even: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when value refers to another present property\", function (assert) {\n    options = { messages: { greaterThan: \"failed to be greater\", numericality: \"failed validation\" }, greaterThan: \"attribute_2\" };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute_1\", options: options });\n      set(model, \"attribute_1\", 0);\n      set(model, \"attribute_2\", 1);\n    });\n    assert.deepEqual(validator.errors, [\"failed to be greater\"]);\n    run(function () {\n      set(model, \"attribute_1\", 2);\n      set(model, \"attribute_2\", 1);\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when options is true\", function (assert) {\n    options = true;\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"is not a number\"]);\n  });\n\n  qunit.test(\"when equal to  and no message is passed\", function (assert) {\n    options = { equalTo: 11 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"must be equal to 11\"]);\n  });\n\n  qunit.test(\"when greater than and no message is passed\", function (assert) {\n    options = { greaterThan: 11 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"must be greater than 11\"]);\n  });\n\n  qunit.test(\"when greater than or equal to and no message is passed\", function (assert) {\n    options = { greaterThanOrEqualTo: 11 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"must be greater than or equal to 11\"]);\n  });\n\n  qunit.test(\"when less than and no message is passed\", function (assert) {\n    options = { lessThan: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, [\"must be less than 10\"]);\n  });\n\n  qunit.test(\"when less than or equal to and no message is passed\", function (assert) {\n    options = { lessThanOrEqualTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, [\"must be less than or equal to 10\"]);\n  });\n\n  qunit.test(\"when odd and no message is passed\", function (assert) {\n    options = { odd: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"must be odd\"]);\n  });\n\n  qunit.test(\"when even and no message is passed\", function (assert) {\n    options = { even: true };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    assert.deepEqual(validator.errors, [\"must be even\"]);\n  });\n\n  qunit.test(\"when other messages are passed but not a numericality message\", function (assert) {\n    options = { messages: { greaterThan: \"failed validation\" } };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"abc\");\n    });\n    assert.deepEqual(validator.errors, [\"is not a number\"]);\n  });\n\n  qunit.test(\"when greaterThan fails and a greaterThan message is passed but not a numericality message\", function (assert) {\n    options = { greaterThan: 11, messages: { greaterThan: \"custom message\" } };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      model.set(\"attribute\", 10);\n    });\n    assert.deepEqual(validator.errors, [\"custom message\"]);\n  });\n\n  qunit.test(\"numericality validators don't call addObserver on null props\", function (assert) {\n    var stubbedObserverCalls = 0;\n\n    var realAddObserver = model.addObserver;\n    model.addObserver = function (_, path) {\n      stubbedObserverCalls += 1;\n      if (!path) {\n        assert.ok(false, \"shouldn't call addObserver with falsy path\");\n      }\n      return realAddObserver.apply(this, arguments);\n    };\n\n    options = { lessThanOrEqualTo: 10 };\n    run(function () {\n      validator = Numericality['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", 11);\n    });\n    model.addObserver = realAddObserver;\n\n    assert.equal(1, stubbedObserverCalls, \"stubbed addObserver was called\");\n  });\n\n});","define('dummy/tests/unit/validators/local/numericality-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/numericality-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/numericality-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/local/presence-test', ['ember', 'qunit', 'ember-validations/validators/local/presence', 'ember-validations/mixin', 'dummy/tests/helpers/container'], function (Ember, qunit, Presence, Mixin, container) {\n\n  'use strict';\n\n  var model, Model, options, validator;\n  var set = Ember['default'].set;\n  var run = Ember['default'].run;\n\n  qunit.module(\"Presence Validator\", {\n    setup: function setup() {\n      Model = Ember['default'].Object.extend(Mixin['default']);\n      run(function () {\n        model = Model.create();\n      });\n    }\n  });\n\n  qunit.test(\"when value is not empty\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Presence['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"not empty\");\n    });\n    assert.deepEqual(validator.errors, []);\n  });\n\n  qunit.test(\"when value is empty\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Presence['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n  qunit.test(\"when options is true\", function (assert) {\n    options = true;\n    run(function () {\n      validator = Presence['default'].create({ model: model, property: \"attribute\", options: options });\n      set(model, \"attribute\", \"\");\n    });\n    assert.deepEqual(validator.errors, [\"can't be blank\"]);\n  });\n\n  qunit.test(\"when value is blank\", function (assert) {\n    options = { message: \"failed validation\" };\n    run(function () {\n      validator = Presence['default'].create({ model: model, property: \"attribute\", options: options });\n      model.set(\"attribute\", \" \");\n    });\n    assert.deepEqual(validator.errors, [\"failed validation\"]);\n  });\n\n});","define('dummy/tests/unit/validators/local/presence-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/local');\n  test('unit/validators/local/presence-test.js should pass jshint', function() { \n    ok(true, 'unit/validators/local/presence-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/validators/remote/uniqueness_test', function () {\n\n\t'use strict';\n\n\tif (false) {} // remove this line. It is only here to fix issue #232\n\t// module('Uniqueness options', {\n\t// setup: function() {\n\t// Ember.Validations.forms['new_user'] = {\n\t// type: 'ActionView::Helpers::FormBuilder',\n\t// input_tag: '<div class=\"field_with_errors\"><span id=\"input_tag\" /><label class=\"message\"></label></div>',\n\t// label_tag: '<div class=\"field_with_errors\"><label id=\"label_tag\" /></div>',\n\t// validators: {'user[email]':{\"uniqueness\":[{\"message\": \"must be unique\", \"scope\":{'name':\"pass\"}}]},\"presence\":[{\"message\": \"must be present\"}]}\n\t// }\n\n\t// $('#qunit-fixture')\n\t// .append($('<form />', {\n\t// action: '/users',\n\t// 'data-validate': true,\n\t// method: 'post',\n\t// id: 'new_user'\n\t// }))\n\t// .find('form')\n\t// .append($('<input />', {\n\t// name: 'user[name]',\n\t// id: 'user_name',\n\t// type: 'text'\n\t// }))\n\t// .append($('<input />', {\n\t// name: 'user[email]',\n\t// id: 'user_email',\n\t// type: 'text'\n\t// }))\n\n\t// $('form#new_user').call();\n\t// }\n\t// });\n\n\t// test('when matching uniqueness on a non-nested resource', function() {\n\t// var element = $('<input type=\"text\" name=\"user[email]\"/>');\n\t// var options = { 'message': \"failed validation\" };\n\t// element.val('nottaken@test.com');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), undefined);\n\t// });\n\n\t// test('when matching uniqueness on a non-nested resource', function() {\n\t// var element = $('<input type=\"text\" name=\"user[email]\"/>');\n\t// var options = { 'message': \"failed validation\" };\n\t// element.val('taken@test.com');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), \"failed validation\");\n\t// });\n\n\t// test('when matching uniqueness on a nested singular resource', function() {\n\t// var element = $('<input type=\"text\" name=\"profile[user_attributes][email]\"/>');\n\t// var options = { 'message': \"failed validation\" };\n\t// element.val('nottaken@test.com');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), undefined);\n\t// });\n\n\t// test('when matching uniqueness on a nested singular resource', function() {\n\t// var element = $('<input type=\"text\" name=\"profile[user_attributes][email]\"/>');\n\t// var options = { 'message': \"failed validation\" };\n\t// element.val('taken@test.com');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), \"failed validation\");\n\t// });\n\n\t// test('when using scopes with no replacement', function() {\n\t// var element = $('<input type=\"text\" name=\"person[age]\" />');\n\t// var options = { 'message': \"failed validation\", 'with': /\\d+/, 'scope': { 'name': 'test name' } };\n\t// element.val('test');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), \"failed validation\");\n\t// });\n\n\t// test('when using scopes with replacement', function() {\n\t// var element = $('<input type=\"text\" name=\"person[age]\" />');\n\t// var options = { 'message': \"failed validation\", 'with': /\\d+/, 'scope': { 'name': 'test name' } };\n\t// element.val('test')\n\t// $('#qunit-fixture').append('<input type=\"text\" name=\"person[name]\" />').find('input[name=\"person[name]\"]').val('other name');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), undefined);\n\t// });\n\n\t// test('when validating by scope and mixed focus order', function() {\n\t// var unique_element = $('#user_email'), scope_element = $('#user_name');\n\t// unique_element.val('free@test.com');\n\t// unique_element.trigger('change');\n\t// unique_element.trigger('focusout');\n\t// equal($('.message[for=\"user_email\"]').text(), '');\n\n\t// scope_element.val('test name');\n\t// scope_element.trigger('change');\n\t// scope_element.trigger('focusout');\n\t// equal($('.message[for=\"user_email\"]').text(), 'must be unique');\n\t// });\n\n\t// test('when using scopes with replacement as checkboxes', function() {\n\t// var element = $('<input type=\"text\" name=\"person[age]\" />');\n\t// var options = { 'message': \"failed validation\", 'with': /\\d+/, 'scope': { 'name': 'test name' } };\n\t// element.val('test')\n\t// $('#qunit-fixture')\n\t// .append('<input type=\"hidden\" name=\"person[name]\" value=\"other name\"')\n\t// .append('<input type=\"checkbox\" name=\"person[name]\" value=\"test name\"/>')\n\t// .find('input[name=\"person[name]\"]').val('other name');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), undefined);\n\t// $('[name=\"person[name]\"]:checkbox')[0].checked = true;\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), 'failed validation');\n\t// });\n\n\t// test('when matching uniqueness on a resource with a defined class name', function() {\n\t// var element = $('<input type=\"text\" name=\"user2[email]\"/>');\n\t// var options = { 'message': \"failed validation\", 'class': \"active_record_test_module/user2\" };\n\t// element.val('nottaken@test.com');\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), 'failed validation');\n\t// });\n\n\t// test('when allowing blank', function() {\n\t// var element = $('<input type=\"text\" name=\"user2[email]\" />');\n\t// var options = { 'message': \"failed validation\", 'with': /\\d+/, 'allowBlank': true };\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), undefined);\n\t// });\n\n\t// test('when not allowing blank', function() {\n\t// var element = $('<input type=\"text\" name=\"user2[email]\" />');\n\t// var options = { 'message': \"failed validation\", 'with': /\\d+/ };\n\t// equal(Ember.Validations.validators.remote.uniqueness(model, property, options), \"failed validation\");\n\t// });\n\n\t// test('when matching local uniqueness for nested has-many resources', function() {\n\t// $('#qunit-fixture')\n\t// .append($('<form />', {\n\t// action: '/users',\n\t// 'data-validate': true,\n\t// method: 'post',\n\t// id: 'new_user_2'\n\t// }))\n\t// .find('form')\n\t// .append($('<input />', {\n\t// name: 'profile[user_attributes][0][email]',\n\t// id: 'user_0_email',\n\t// }))\n\t// .append($('<input />', {\n\t// name: 'profile[user_attributes][1][email]',\n\t// id: 'user_1_email',\n\t// }));\n\n\t// Ember.Validations.forms['new_user_2'] = {\n\t// type: 'ActionView::Helpers::FormBuilder',\n\t// input_tag: '<div class=\"field_with_errors\"><span id=\"input_tag\" /><label for=\"user_name\" class=\"message\"></label></div>',\n\t// label_tag: '<div class=\"field_with_errors\"><label id=\"label_tag\" /></div>',\n\t// validators: { 'user[email]':{\"uniqueness\":[{\"message\": \"must be unique\"}]}}\n\t// }\n\t// $('form#new_user_2').call();\n\n\t// var user_0_email = $('#user_0_email'),\n\t// user_1_email = $('#user_1_email'),\n\t// options = { 'message': \"must be unique\" };\n\n\t// user_0_email.val('not-locally-unique');\n\t// user_1_email.val('not-locally-unique');\n\n\t// equal(Ember.Validations.validators.remote.uniqueness(user_1_email, options), undefined);\n\t// equal(Ember.Validations.validators.local.uniqueness(user_1_email, options), \"must be unique\");\n\t// });\n\n});","define('dummy/tests/unit/validators/remote/uniqueness_test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/validators/remote');\n  test('unit/validators/remote/uniqueness_test.js should pass jshint', function() { \n    ok(true, 'unit/validators/remote/uniqueness_test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-validations\",\"version\":\"2.0.0-alpha.2.aa5df24b\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdphBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}